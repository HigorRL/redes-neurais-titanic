# -*- coding: utf-8 -*-
"""redes-neurais-titanic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TrnB6sBogggh7e3sSCLkqu52TaKK1_k3
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OrdinalEncoder
from keras.models import Sequential
from keras.layers import Dense
import matplotlib.pyplot as plt

df = pd.read_csv('titanic.csv')
df.head()

# Conversão das varáveis categóricas
encoder_survived = OrdinalEncoder()
encoder_class = OrdinalEncoder()
encoder_fare = OrdinalEncoder()
encoder_age = OrdinalEncoder()
encoder_sex = OrdinalEncoder()

# Realizando conversão
df['Survived'] = encoder_survived.fit_transform(df['Survived'].values.reshape(-1,1))
df['Pclass'] = encoder_class.fit_transform(df['Pclass'].values.reshape(-1,1))
df['Sex'] = encoder_sex.fit_transform(df['Sex'].values.reshape(-1,1))

df = df.dropna()

# Dividindo os dados em x (input) e y (output)
x = df.drop(['Survived', 'PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked'], axis=1)
y = df['Survived']

x

y

# Separanndo os dados em treinno e teste
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3,
                                                     random_state=42)

x_train

y_train

x_test

y_test

# Criando a rede neural
model = Sequential()
model.add(Dense(8, input_dim=4, activation='relu'))
model.add(Dense(5, activation='relu'))
model.add(Dense(4, activation='softmax')) # 2 classes: Pclass, sex, Fare, Age

# Compilado o modelo
model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

history = model.fit(x_train, y_train,
                    epochs=250, batch_size=2,
                    verbose=1,
                    validation_data=(x_test, y_test))

# Plotando o histórico de perda (loss)
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Histórico de Loss')
plt.xlabel('Épocas')
plt.ylabel('Loss')
plt.legend()

# Plotando o histórico de acurácia
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Histórico de Acurácia')
plt.xlabel('Épocas')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# Avaliando a rede neural
accuracy = model.evaluate(x_test, y_test)[1]
print(f'Acurácia do modelo: {accuracy * 100:.2f}%')